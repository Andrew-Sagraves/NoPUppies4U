bmulli21.h
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  5) #include <vector>
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  6) #include <map>
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  7) #include <ctime>
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 11) //Loads original date modified times from a file for comparison into a map
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 12) map<string, time_t> load_previous_date_modified(const string& dateModifiedFile);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 13) //Recursively finds and stores all files in a directory and subdirectories in a vector
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 14) vector<string> get_all_files_recursively(const string& directoryPath);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 15) //All in one function to create a date modified file and check against that file on subsequent runs
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 16) void check_directory_for_changes(const string& checkingDirectory);

bmulli21.cpp
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400   5) #include <fstream>
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400   7) #include <sys/stat.h>
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400   8) #include <map>
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400   9) #include <sstream>
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  13) //Loads previous date modified time from a file into a map
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  14) map<string, time_t> load_previous_date_modified(const string& dateModifiedFile) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  15)     map<string, time_t> timestamps;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  16)     ifstream recordFile(dateModifiedFile);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  18)     if (!recordFile.is_open()) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  19)         cout << "date_modified.txt not found. Creating new file." << endl;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  20)         return timestamps; //Return an empty map
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  21)     }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  23)     string line;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  24) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  25)     while (getline(recordFile, line)) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  26)         stringstream stringStream(line);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  27)         string filePath;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  28)         time_t dateModified;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  29)         
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  30)         //Format = <filepath> - <datemodified>
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  31)         if (getline(stringStream, filePath, '-') && stringStream >> dateModified) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  32)             //Removes space at end of filePath if it exists
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  33)             if (!filePath.empty() && filePath.back() == ' ') {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  34)                 filePath.pop_back();
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  35)             }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  36) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  37)             timestamps[filePath] = dateModified;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  38)         }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  41)     recordFile.close();
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  42) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  43)     return timestamps;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  47) //Creates a vector of all files in a directory and subdirectories
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  48) vector<string> get_all_files_recursively(const string& directoryPath) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  49)     vector<string> filePath;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  51)     if (!filesystem::is_directory(directoryPath)) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  52)         cerr << "Error: Not a valid directory - " << directoryPath << endl;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  53)         return filePath; // Return empty list
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  56)     //Iterators to go through directory and subdirectories
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  57)     filesystem::recursive_directory_iterator iterator(directoryPath);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  58)     filesystem::recursive_directory_iterator endingIterator;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  60)     for (; iterator != endingIterator; ++iterator) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  61)         //Only adds files, not directories or other types like symlinks
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  62)         if (filesystem::is_regular_file(iterator->path())) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  63)             filePath.push_back(iterator->path().string());
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  64)         }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  65)     }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  66)     
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  67)     return filePath;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  70) //This is an all in one function that does everything.
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  71) //Checks a directory for changed files, generates a report, and updates records.
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  72) void check_directory_for_changes(const string& checkingDirectory) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  73)     const string dateModifiedTxt = "date_modified.txt";
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  74)     const string newlyDateModifiedTxt = "new_date_modified.txt";
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  76)     //Load the old timestamps into our efficient map.
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  77)     map<string, time_t> oldDateModified = load_previous_date_modified(dateModifiedTxt);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  79)     //Get a list of all files currently in the directory and subdirectories
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  80)     vector<string> currentFiles = get_all_files_recursively(checkingDirectory);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  82)     if (currentFiles.empty()) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  83)         cout << "No files found in directory." << endl;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  84)         return;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  85)     }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  86) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  87)     vector<string> newlyModifiedFiles;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  88) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  89)     //New file to store updated timestamps
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  90)     ofstream newModifiedFile(dateModifiedTxt, ios::trunc);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  92)     if (!newModifiedFile.is_open()) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  93)         cerr << "Error: Could not open record file - " << dateModifiedTxt << endl;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  94)         return;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  95)     }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  97)     cout << "Scanning " << currentFiles.size() << " files..." << endl;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  98) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400  99)     //Loops through all current files to check for modifications
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 100)     for (size_t i = 0; i < currentFiles.size(); ++i) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 101)         const string& filePath = currentFiles[i];
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 102)         struct stat fileStat;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 103) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 104)         //Gets the file's current modified time
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 105)         if (stat(filePath.c_str(), &fileStat) == 0) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 106)             time_t currentModifiedTime = fileStat.st_mtime;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 107) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 108)             //Format: <filepath> - <datemodified>
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 109)             newModifiedFile << filePath << " - " << currentModifiedTime << "\n";
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 110) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 111)             //Checks if this file was modified
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 112)             if (oldDateModified.count(filePath)) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 113)                 //If the file is already there, compare its old and new timestamps.
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 114)                 if (currentModifiedTime > oldDateModified[filePath]) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 115)                     newlyModifiedFiles.push_back(filePath);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 116)                 }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 117)             } else {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 118)                 //If the file is new, add it to the modified list
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 119)                 newlyModifiedFiles.push_back(filePath);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 120)             }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 121)         }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 122)     }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 123) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 124)     newModifiedFile.close();
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 125) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 126)     //If any files were modified, create a report file
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 127)     if (!newlyModifiedFiles.empty()) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 128)         cout << newlyModifiedFiles.size() << " file(s) have been modified or added." << endl;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 129)         cout << "Creating report file: " << newlyDateModifiedTxt << endl;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 130) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 131)         ofstream reportDateModified(newlyDateModifiedTxt, ios::trunc);
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 132) 
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 133)         if (!reportDateModified.is_open()) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 134)             cerr << "Error: Could not open report file - " << newlyDateModifiedTxt << endl;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 135)         } else {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 136)             for (size_t i = 0; i < newlyModifiedFiles.size(); ++i) {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 137)                 reportDateModified << newlyModifiedFiles[i] << "\n";
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 138)             }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 139)             reportDateModified.close();
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 140)         }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 141)     } else {
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 142)         cout << "No files have been modified since the last check." << endl;
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 143)     }
4d2003d3 (bmulli17      2025-09-29 16:50:55 -0400 145)     cout << "Check complete! Date modified times are now up to date." << endl;